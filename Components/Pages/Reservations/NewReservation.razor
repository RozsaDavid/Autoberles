@page "/newReservation"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "Administrator, User")]
@inject Autoberles.Data.MyDbContext DB
@inject NavigationManager navigationManager
@inject IJSRuntime Jsr
@rendermode InteractiveServer

<PageTitle>Új foglalás</PageTitle>

<h1>Új foglalás</h1>

@* csalás, de működik D.*@
<AuthorizeView>
    @if(true) {
        activeUser = context.User.Identity.Name;
    }
</AuthorizeView>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-auto">
            <div class="d-flex">
                <label class="mt-3 m-2">Kezdődátum:</label>
                <div class="mt-3 me-5"><InputDate @bind-Value="SearchStart"></InputDate></div>
                <label class="mt-3 m-2">Végdátum:</label>
                    <div class="mt-3"><InputDate @bind-Value="SearchEnd"></InputDate></div>
            </div>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-auto">
            <p class="btn btn-success mt-3" @onclick="ShowGrid">Keresés</p>
        </div>
    </div>
</div>
@if (showQG)
{
    <QuickGrid Class="table" Items="@filteredCars.AsQueryable()">
        <PropertyColumn Title="Márka" Property="car => car.Brand" Sortable="true" />
        <PropertyColumn Title="Típus" Property="car => car.Type" Sortable="true" />
        <PropertyColumn Title="Évjárat" Property="car => car.Year" Sortable="true" />
        <PropertyColumn Title="Ár (HUF)" Property="car => car.Price" Sortable="true" />
        <TemplateColumn Context="car" Title="Foglalás">
            <button class="btn btn-success" @onclick="()=>ReserveCar(car)">Foglalás</button>
        </TemplateColumn>
    </QuickGrid>
}

@code{
    [SupplyParameterFromForm]
    Reservation newRes { set; get; } = new();

    public string activeUser;

    public DateTime SearchStart = DateTime.Now.AddDays(1);
    public DateTime SearchEnd = DateTime.Now.AddDays(7);

    private bool showQG = false;
    private List<Car> filteredCars = new List<Car>();

    private async Task ShowGrid()
    {
        if ((DateTime.Compare(SearchStart, SearchEnd) > 0) || DateTime.Compare(SearchStart, DateTime.Now)<0) {
            Jsr.InvokeVoidAsync("alert", "Hibás dátum!");
            SearchStart = DateTime.Now.AddDays(1);
            SearchEnd = DateTime.Now.AddDays(7);
    } else {
            string startDateString0 = SearchStart.ToShortDateString();
            string endDateString0 = SearchEnd.ToShortDateString();
            filteredCars = await GetCarsExcludingDateRange(DateTime.Parse(startDateString0), DateTime.Parse(endDateString0));
            showQG = true;
        }
        
    }
    private Task<List<Car>> GetCarsExcludingDateRange(DateTime startDate, DateTime endDate)
    {
        var reservedCarIds = DB.Reservation
            .Where(res => (res.StartDate <= endDate && res.EndDate >= startDate) || (res.StartDate >= startDate && res.EndDate <= endDate))
            .Select(res => res.CarID)
            .ToList();

        var availableCars = DB.Car
            .Where(car => !reservedCarIds.Contains(car.CarID))
            .ToList();

        return Task.FromResult(availableCars);
    }

    private async Task ReserveCar(Car car)
    {
        var overlappingReservations = await DB.Reservation
            .AnyAsync(res => res.CarID == car.CarID && res.StartDate <= SearchEnd && res.EndDate >= SearchStart);

        if (overlappingReservations)
        {
            navigationManager.NavigateTo("/newReservation");
        }
        else
        {
            //UserID keresése D.

            int reservationUserID=-1;
            foreach(User user in DB.User) {
                if(user.Username == activeUser)
                    reservationUserID = user.UserID;
            }

            Reservation newReservation = new Reservation
                {
                    CarID = car.CarID,
                    UserID = reservationUserID,
                    StartDate = SearchStart,
                    EndDate = SearchEnd
                };

            DB.Reservation.Add(newReservation);
            await DB.SaveChangesAsync();
            showQG = false;
            navigationManager.NavigateTo("/reservations");
        }
    }
}