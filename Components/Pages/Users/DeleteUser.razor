@page "/deleteUser"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator")]
@inject Autoberles.Data.MyDbContext DB
@inject NavigationManager navigationManager
@rendermode InteractiveServer


<h3>Törlés</h3>
<hr />
<div>
    @if(UserDB is null) {
        <p><em>Loading...</em></p>
    } else {
        <div class="row">
            <div class="col-md4">

                <div class="mb-3">

                    <label for="username">Felhasználónév:</label><br />
                    <input type="text" id="username" @bind="UserDB.Username" disabled /><br /><br />
                    <label for="role">Szerepkör:</label><br />
                    <input type="text" id="role" @bind="UserDB.Role" disabled /><br /><br />
                    
                    <p>Ha biztosan törölni kíván kattintson a "Törlés" gombra!</p>

                </div>

                <button type="submit" class="btn btn-danger" disabled="@(UserDB is null)" @onclick="deleteUser">Törlés</button>
                <a href="/users" class="btn btn-primary">Vissza a felhasználókhoz</a>

            </div>
        </div>


    }
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    public User? UserDB { get; set; }


    protected override async Task OnInitializedAsync() {
        UserDB = await DB.User.FirstOrDefaultAsync(m => m.UserID == Id);

        if(UserDB is null) {
            navigationManager.NavigateTo("/Error");
        }
    }

    public async Task deleteUser() {
        try {
            UserDB.IsActive = false;
            DB.Attach(UserDB).State = EntityState.Modified;
            //DB.Remove(UserDB);
            // DB.Attach(CarDB).State = EntityState.Deleted;
            DB.SaveChangesAsync();

        } catch(DbUpdateConcurrencyException) {
            if(!UserException(UserDB.UserID)) {
                navigationManager.NavigateTo("/Error");
            } else {
                throw;
            }
        }
        navigationManager.NavigateTo("/users");
    }

    bool UserException(int id) {
        return DB.User.Any(x => x.UserID == id);
    }
}