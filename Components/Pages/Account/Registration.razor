@page "/registration"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Cryptography
@using System.Text
@inject Autoberles.Data.MyDbContext DB
@inject NavigationManager NavigationManager
@inject IJSRuntime Jsr

@rendermode InteractiveServer


<h3>Regisztráció</h3>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" FormName="create" OnValidSubmit="AddUser" Model="UserDB" Enhance>
            <DataAnnotationsValidator/>
            <div class="mb-3">
                <label for="name" class="form-label">Felhasználónév</label>
                <InputText id="name" class="form-control" @bind-Value="UserDB.Username" />
                <ValidationMessage For="()=>UserDB.Username" class="text-danger" />
                <label for="password" class="form-label">Jelszó</label>
                <InputText type="password" id="password" class="form-control" @bind-Value="UserDB.Password" />
                <ValidationMessage For="()=>UserDB.Password" class="text-danger" />
                <label for="email" class="form-label">E-mail</label>
                <InputText id="email" class="form-control" @bind-Value="UserDB.Email" />
                <ValidationMessage For="()=>UserDB.Email" class="text-danger" />
                <label for="address" class="form-label">Cím</label>
                <InputText id="address" class="form-control" @bind-Value="UserDB.Address" />
                <ValidationMessage For="()=>UserDB.Address" class="text-danger" />
                <label for="phone" class="form-label">Telefonszám</label>
                <InputText id="phone" class="form-control" @bind-Value="UserDB.Phone" />
                <ValidationMessage For="()=>UserDB.Phone" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-success">Regisztrálás</button>
            <a href="/" class="btn btn-primary">Vissza a főoldalra</a>
        </EditForm>
    </div>
</div>


@code {
    [SupplyParameterFromForm]
    public User UserDB { get; set; } = new();


    public async Task AddUser() {
        bool dataIsTaken = false;

        foreach(var elem in DB.User) {
            if (elem.Username == UserDB.Username || elem.Email == UserDB.Email)
                dataIsTaken = true;            
        }

        if(dataIsTaken) {
            await Jsr.InvokeVoidAsync("alert", "A felhasználónév és/vagy az e-mail cím már foglalt!");
            UserDB=new User();
        } else {
            var source = Encoding.UTF8.GetBytes(UserDB.Password);
            var hashBytes = SHA512.Create().ComputeHash(source);
            UserDB.Password = BitConverter.ToString(hashBytes).Replace("-", "");

            UserDB.Role = "User";

            DB.User.Add(UserDB);
            await DB.SaveChangesAsync();

            UserDB.Password = String.Empty;
            NavigationManager.NavigateTo("/");
        }
    }
}